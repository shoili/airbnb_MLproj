# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
maxs <- apply(mu, 2, max)
mins <- apply(mu, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(V, 2, max)
mins <- apply(V, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat~X1+X2+X1*X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
# prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muhat~X1+X2+X1*X2",data=scaledmu,hidden=c(5,3))
pr.nn <- compute(nn,scaledV[,2:3])
# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
maxs <- apply(mu, 2, max)
mins <- apply(mu, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(V, 2, max)
mins <- apply(V, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat~X1 + X2 + V3",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
# prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muhat~ X1 + X2 + V4",data=scaledmu,hidden=c(5,3))
pr.nn <- compute(nn,scaledV[,2:3])
# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
maxs <- apply(mu, 2, max)
mins <- apply(mu, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(V, 2, max)
mins <- apply(V, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat~X1 + X2 + V3",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
# prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muhat~ X1 + X2 + V3",data=scaledmu,hidden=c(5,3))
pr.nn <- compute(nn,scaledV[,2:3])
# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
View(Vwithextra)
maxs <- apply(mu, 2, max)
mins <- apply(mu, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(V, 2, max)
mins <- apply(V, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2 + V4",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
# prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muha t~ X1 + X2 + V4",data=scaledmu,hidden=c(5,3))
pr.nn <- compute(nn,scaledV[,2:3])
# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
maxs <- apply(muwithextra, 2, max)
mins <- apply(muwithextra, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2 + V4",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
# prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muhat ~ X1 + X2 + V4",data=scaledmu,hidden=c(5,3))
pr.nn <- compute(nn,scaledV[,2:3])
# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
maxs <- apply(muwithextra, 2, max)
mins <- apply(muwithextra, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2 + V4",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:4])
# prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muhat ~ X1 + X2 + V4",data=scaledmu,hidden=c(5,3))
pr.nn <- compute(nn,scaledV[,2:4])
# pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
View(aa)
View(aa)
aa<- cbind(pr.nn_,mu$muhat,V$Vhat,abs(prV.nn_),pred2)
View(aa)
mean((V$Vhat- abs(prV.nn_))^2)
mean((V$Vhat- pred2)^2)
mean((V$Vhat- prV.nn_)^2)
plot(mu$muhat,V$Vhat)
maxs <- apply(muwithextra, 2, max)
mins <- apply(muwithextra, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
# prV.nn <- compute(nnV,scaledV[,2:4])
prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
n <- names(mu)
nn <- neuralnet("muhat ~ X1 + X2",data=scaledmu,hidden=c(5,3))
# pr.nn <- compute(nn,scaledV[,2:4])
pr.nn <- compute(nn,scaledmid[,1:2])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
model2 <- randomForest(Vhat ~ ., data = V, ntree=50)
model2
pred2 <- predict(model2, newdata = V)
(r22 <- rSquared(validV$Vhat, validV$Vhat - predict(model2, validV[,2:3])))
(mse2 <- mean((validV$Vhat - predict(model2, validV[,2:3]))^2))
aa<- cbind(pr.nn_,mu$muhat,V$Vhat,abs(prV.nn_),pred2)
a<- cbind(pr.nn_,abs(prV.nn_))
write.csv(a,file ="C:\\Users\\Parit\\Desktop\\Classwork\\Georgia Tech\\Spring 2017 work\\ISyE 7406 - Data Mining and Statistical Learning\\pred.csv")
View(a)
View(aa)
nnV <- neuralnet("Vhat ~ exp(X1) + exp(X2)",data=scaledV,hidden=c(5,3))
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ exp(X1 + X2)",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
nnV <- neuralnet("Vhat ~ exp(X1) * exp(X2)",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
nV <- names(V)
nnV <- neuralnet("Vhat ~ exp(X1) * exp(X2)",data=scaledV,hidden=c(5,3))
Vwithextra$X1 <- exp(Vwithextra$X1)
Vwithextra$X2 <- exp(Vwithextra$X2)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
nnV <- neuralnet("Vhat ~ X1 * X2",data=scaledV,hidden=c(5,3))
Vwithextra$X1 <- exp(Vwithextra$X1)
Vwithextra$X2 <- exp(Vwithextra$X2)
nnV <- neuralnet("Vhat ~ X1 * X2",data=scaledV,hidden=c(5,3))
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
nnV <- neuralnet("Vhat ~ X1 * X2",data=scaledV,hidden=c(5,3))
+
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
aa<- cbind(pr.nn_,mu$muhat,V$Vhat,abs(prV.nn_),pred2)
View(aa)
nnV <- neuralnet("Vhat ~ X1 * X2",data=scaledV,hidden=c(5,3))
nnV <- neuralnet("Vhat ~ X1 * X2",data=scaledV,hidden=c(5,3))
1
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1",data=scaledV,hidden=c(5,3))
Vwithextra$X1 <- exp(Vwithextra$X1+ Vwithextra$X2)
Vwithextra$X2 <-
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
Vwithextra$X1 <- exp(Vwithextra$X1+ Vwithextra$X2)
Vwithextra$X2 <-
maxs <- apply(Vwithextra, 2, max)
Vwithextra$X1 <- exp(Vwithextra$X1+ Vwithextra$X2)
Vwithextra$X2 <- Vwithextra$X2
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1",data=scaledV,hidden=c(5,3))
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
n = dim(midtermtrain)[1]; ### total number of observations
n1 = round(n/10); #
flag = sort(sample(1:n, n1));
trainVex = Vwithextra[-flag,]; testVex = Vwithextra[flag,];
trainmuex = muwithextra[-flag,]; testmuex = muwithextra[flag,];
trainV = V[-flag,]; testV= V[flag,];
trainmu = mu[-flag,]; testmu = mu[flag,];
t = dim(midtermtrain)[1]; ### total number of observations
t1 = round(n/10); #
flag1 = sort(sample(1:t, t1));
traintrainV = trainVex[-flag1,]; validV = trainVex[flag1,];
traintrainmu = trainmuex[-flag1,]; validmu = trainmuex[flag1,];
Vwithextra$X1 <- exp(Vwithextra$X1+ Vwithextra$X2)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledmid[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
prV.nn <- compute(nnV,exp(scaledmid[,1]+scaledmid[,2]))
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
prV.nn <- compute(nnV,exp(scaledmid[,1]+scaledmid[,2]))
prV.nn <- compute(nnV,scaledV[,2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(pr.nn_,mu$muhat,V$Vhat,abs(prV.nn_),pred2)
prV.nn <- compute(nnV,scaledV[,2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
pr.nn <- compute(nn,scaledV[,2:4])
pr.nn_ <- pr.nn$net.result*(max(mu$muhat)-min(mu$muhat))+min(mu$muhat)
aa<- cbind(pr.nn_,mu$muhat,V$Vhat,abs(prV.nn_),pred2)
aa<- cbind(V$Vhat,abs(prV.nn_))
View(aa)
model2 <- randomForest(Vhat ~ exp(X1)+exp(X2), data = V, ntree=50)
model2
pred2 <- predict(model2, newdata = V)
(r22 <- rSquared(validV$Vhat, validV$Vhat - predict(model2, validV[,2:3])))
model2 <- randomForest(Vhat ~ exp(X1)+exp(X2), data = V, ntree=50)
model2
pred2 <- predict(model2, newdata = V)
(r22 <- rSquared(validV$Vhat, validV$Vhat - predict(model2, validV[,2:3])))
(mse2 <- mean((validV$Vhat - predict(model2, validV[,2:3]))^2))
pred2
a<- cbind(pr.nn_,abs(prV.nn_),pred2)
aa<- cbind(V$Vhat,abs(prV.nn_),pred2)
View(aa)
model2 <- randomForest(Vhat ~ exp(X1+X2), data = V, ntree=50)
model2
pred2 <- predict(model2, newdata = V)
aa<- cbind(V$Vhat,abs(prV.nn_),pred2)
View(aa)
(r22 <- rSquared(validV$Vhat, validV$Vhat - predict(model2, validV[,2:3])))
(mse2 <- mean((validV$Vhat - predict(model2, validV[,2:3]))^2))
(r22 <- rSquared(V$Vhat, V$Vhat - predict(model2, V[,2:3])))
(mse2 <- mean((validV$Vhat - predict(model2, validV[,2:3]))^2))
(mse2 <- mean((V$Vhat - predict(model2, V[,2:3]))^2))
library(nnet)
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
maxs <- apply(muwithextra, 2, max)
mins <- apply(muwithextra, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ exp(X1)+exp(X2)",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,1:2])
prV.nn <- compute(nnV,exp(scaledmid[,1]+scaledmid[,2]))
prV.nn <- compute(nnV,scaledV[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(V$Vhat,abs(prV.nn_),pred2)
View(aa)
nnV <- neuralnet("Vhat ~ exp(X1)*exp(X2)",data=scaledV,hidden=c(5,3))
nnV <- neuralnet("Vhat ~ exp(X1 + X2)",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,1:2])
nnV <- neuralnet("Vhat ~ exp( X1 + X2 )",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,1:2])
prV.nn <- compute(nnV,scaledV[,1])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(V$Vhat,abs(prV.nn_),pred2)
Vwithextra$Vhat <- log(Vwithextra$Vhat)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("log(Vhat) ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,1:2])
prV.nn <- compute(nnV,exp(scaledmid[,1]+scaledmid[,2]))
prV.nn <- compute(nnV,scaledV[,1:2])
Vwithextra$Vhat <- log(Vwithextra$Vhat)
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra$Vhat <- log(Vwithextra$Vhat)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(V$Vhat,log(prV.nn_),pred2)
View(aa)
View(prV.nn_)
aa<- cbind(V$Vhat,(prV.nn_),pred2)
View(aa)
plot(X1+X2, log(Vhat));
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra$Vhat <- log(Vwithextra$Vhat)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,1:2])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(V$Vhat,(prV.nn_),pred2)
View(aa)
cbind(V$Vhat,Vwithextra$Vhat)
cbind(log(V$Vhat),Vwithextra$Vhat)
prV.nn <- compute(nnV,scaledV[,2:3])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(V$Vhat,(prV.nn_),pred2)
View(aa)
View(scaledV)
aa<- cbind(scaledV$Vhat,(prV.nn_),pred2)
View(aa)
aa<- cbind(scaledV$Vhat,log(prV.nn_),pred2)
View(a)
View(aa)
aa<- cbind(scaledV$Vhat,exp(prV.nn_),pred2)
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
maxs <- apply(muwithextra, 2, max)
mins <- apply(muwithextra, 2, min)
scaledmu <- as.data.frame(scale(muwithextra, center = mins, scale = maxs - mins))
#
# Vwithextra$X1 <- exp(Vwithextra$X1+ Vwithextra$X2)
# Vwithextra$X2 <- Vwithextra$X2
Vwithextra$Vhat <- log(Vwithextra$Vhat)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
View(aa)
mean((scaledV - prV,nn_)^2)
mean((scaledV - prV.nn_)^2)
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra$Vhat <- log(Vwithextra$Vhat)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(scaledV$Vhat,prV.nn_,pred2)
View(aa)
aa<- cbind(exp(scaledV$Vhat),exp(prV.nn_),pred2)
View(aa)
aa<- cbind(exp(Vwithextra$Vhat),exp(prV.nn_),pred2)
View(aa)
aa<- cbind(Vwithextra$Vhat,exp(prV.nn_),pred2)
View(aa)
df<- as.data.frame(cor(cbind(Vhat,muhat,X1,X2,X1*X2,X1^2,X2^2,exp(X1),exp(X2))))
mu<-as.data.frame(cbind(muhat,X1,X2))
V<-as.data.frame(cbind(Vhat,X1,X2))
muwithextra<-as.data.frame(cbind(muhat,X1,X2,X1*X2,X1^2,X2^2))
Vwithextra<-as.data.frame(cbind(Vhat,X1,X2,X1*X2,X1^2,X2^2))
# Vwithextra$X1 <- exp(Vwithextra$X1+ Vwithextra$X2)
# Vwithextra$X2 <- Vwithextra$X2
Vwithextra$Vhat <- log(Vwithextra$Vhat)
maxs <- apply(Vwithextra, 2, max)
mins <- apply(Vwithextra, 2, min)
scaledV <- as.data.frame(scale(Vwithextra, center = mins, scale = maxs - mins))
maxs <- apply(midtermtest, 2, max)
mins <- apply(midtermtest, 2, min)
scaledmid <- as.data.frame(scale(midtermtest, center = mins, scale = maxs - mins))
nV <- names(V)
nnV <- neuralnet("Vhat ~ X1 + X2",data=scaledV,hidden=c(5,3))
prV.nn <- compute(nnV,scaledV[,2:3])
prV.nn_ <- prV.nn$net.result*(max(V$Vhat)-min(V$Vhat))+min(V$Vhat)
aa<- cbind(scaledV$Vhat,(prV.nn_),pred2)
View(aa)
aa<- cbind(V$Vhat,exp(prV.nn_),pred2)
View(aa)
summary(V$Vhat)
library(broom)
library(dplyr)
library(FNN)
library(lars)
inner <- read.csv("dat.csv")
inner$X <- NULL
inner <- subset(inner, select = -c(id))
inner <- subset(inner, (pricevar < 100))
nums <- sapply(clean, is.numeric)
clean_num <- clean[,nums]
clean_num <- na.omit(clean_num)
linearmodel <- lm(avgprice~., data = clean_num)
features <- subset(linearmodeldf, p.value < 0.1)
featurenames <- features$term
feat_new <- clean_num[c(featurenames[2:29], "avgprice")]
clean_100 <- subset(feat_new, avgprice < 100)
clean_200 <- subset(feat_new, avgprice >= 100 & avgprice < 200)
clean_above <- subset(feat_new, avgprice >= 200)
n1_100 = round(n_100/5) ### number of obs randomly selected for testing data
n_200 = dim(clean_200)[1] ### total number of observations
n_100 = dim(clean_100)[1] ### total number of observations
library(glmnet)
library(MASS)
clean <- subset(inner, select = -c(pricevar, amenities,
amenities_list,
requires_license, host_thumbnail_url,
host_picture_url, picture_url))
inner <- read.csv("dat.csv")
setwd("C:/Users/Parit/Desktop/Classwork/Georgia Tech/Spring 2017 work/ISyE 6740 - Computational Data Analysis/airbnb_MLproj")
inner <- read.csv("dat.csv")
inner$X <- NULL
inner <- subset(inner, select = -c(id))
inner <- subset(inner, (pricevar < 100))
clean <- subset(inner, select = -c(pricevar, amenities,
amenities_list,
requires_license, host_thumbnail_url,
host_picture_url, picture_url))
nums <- sapply(clean, is.numeric)
clean_num <- clean[,nums]
clean_num <- na.omit(clean_num)
linearmodel <- lm(avgprice~., data = clean_num)
features <- subset(linearmodeldf, p.value < 0.1)
featurenames <- features$term
feat_new <- clean_num[c(featurenames[2:29], "avgprice")]
linearmodel <- lm(avgprice~., data = clean_num)
features <- subset(linearmodeldf, p.value < 0.1)
features <- subset(linearmodel, p.value < 0.1)
linearmodeldf <- tidy(linearmodel)
features <- subset(linearmodeldf, p.value < 0.1)
featurenames <- features$term
feat_new <- clean_num[c(featurenames[2:29], "avgprice")]
featurenames <- features$term
featurenames
feat_new <- clean_num[c(featurenames[2:29], "avgprice")]
clean_num <- clean[,nums]
clean_num <- na.omit(clean_num)
feat_new <- clean_num[c(featurenames[2:29], "avgprice")]
clean_num[featurenames[2:29]]
summary(linearmodel)
View(linearmodeldf)
sort(linearmod)
sort(linearmodeldf,by=estimate)
linearmodeldf[order(abs(estimate)),]
linearmodeldf[order(abs(estimate)),]
linearmodeldf['abs'] = abs(linearmodeldf$estimate)
linearmodel[featurenames,]
linearmodel[term==featurenames,]
linearmodeldf[term==featurenames,]
linearmodeldf[linearmodeldf$term==featurenames,]
featurenames
